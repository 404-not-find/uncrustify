/*
 * Generated by make_token_names.sh on Sat Mar 25 19:16:42 CST 2006
 * $Id: token_names.h 136 2006-03-28 03:23:34Z bengardner $
 */

module uncrustify.tokenname;
import uncrustify.tokenenum;

import std.string;

char [][] Token_names =
[
   Token.NONE          : "NONE",
   Token.SOF           : "SOF",
   Token.EOF           : "EOF",
   Token.UNKNOWN       : "UNKNOWN",
   Token.WHITESPACE    : "WHITESPACE",
   Token.NEWLINE       : "NEWLINE",
   Token.NL_CONT       : "NL_CONT",
   Token.COMMENT_CPP   : "COMMENT_CPP",
   Token.COMMENT       : "COMMENT",
   Token.COMMENT_MULTI : "COMMENT_MULTI",
   Token.COMMENT_EMBED : "COMMENT_EMBED",
   Token.COMMENT_START : "COMMENT_START",
   Token.COMMENT_END   : "COMMENT_END",
   Token.COMMENT_WHOLE : "COMMENT_WHOLE",
   Token.WORD          : "WORD",
   Token.NUMBER        : "NUMBER",
   Token.STRING        : "STRING",
   Token.IF            : "IF",
   Token.ELSE          : "ELSE",
   Token.FOR           : "FOR",
   Token.WHILE         : "WHILE",
   Token.WHILE_OF_DO   : "WHILE_OF_DO",
   Token.SWITCH        : "SWITCH",
   Token.CASE          : "CASE",
   Token.DO            : "DO",
   Token.VOLATILE      : "VOLATILE",
   Token.TYPEDEF       : "TYPEDEF",
   Token.STRUCT        : "STRUCT",
   Token.ENUM          : "ENUM",
   Token.SIZEOF        : "SIZEOF",
   Token.RETURN        : "RETURN",
   Token.BREAK         : "BREAK",
   Token.UNION         : "UNION",
   Token.GOTO          : "GOTO",
   Token.CONTINUE      : "CONTINUE",
   Token.CAST          : "CAST",
   Token.TYPE_CAST     : "TYPE_CAST",
   Token.TYPENAME      : "TYPENAME",
   Token.TEMPLATE      : "TEMPLATE",
   Token.ASSIGN        : "ASSIGN",
   Token.SASSIGN       : "SASSIGN",
   Token.COMPARE       : "COMPARE",
   Token.SCOMPARE      : "SCOMPARE",
   Token.BOOL          : "BOOL",
   Token.SBOOL         : "SBOOL",
   Token.ARITH         : "ARITH",
   Token.SARITH        : "SARITH",
   Token.DEREF         : "DEREF",
   Token.INCDEC_BEFORE : "INCDEC_BEFORE",
   Token.INCDEC_AFTER  : "INCDEC_AFTER",
   Token.MEMBER        : "MEMBER",
   Token.DC_MEMBER     : "DC_MEMBER",
   Token.INV           : "INV",
   Token.DESTRUCTOR    : "~DESTR",
   Token.NOT           : "NOT",
   Token.ADDR          : "ADDR",
   Token.NEG           : "NEG",
   Token.POS           : "POS",
   Token.STAR          : "STAR",
   Token.PLUS          : "PLUS",
   Token.MINUS         : "MINUS",
   Token.AMP           : "AMP",
   Token.POUND         : "POUND",
   Token.PREPROC       : "PREPROC",
   Token.PREPROC_BODY  : "PREPROC_BODY",
   Token.PP            : "PP",
   Token.ELIPSIS       : "ELIPSIS",
   Token.SEMICOLON     : "SEMICOLON",
   Token.COLON         : "COLON",
   Token.CASE_COLON    : "CASE_COLON",
   Token.Q_COLON       : "Q_COLON",
   Token.QUESTION      : "QUESTION",
   Token.COMMA         : "COMMA",
   Token.ASM           : "ASM",
   Token.CATCH         : "CATCH",
   Token.CLASS         : "CLASS",
   Token.DELETE        : "DELETE",
   Token.EXPORT        : "EXPORT",
   Token.FRIEND        : "FRIEND",
   Token.MUTABLE       : "MUTABLE",
   Token.NAMESPACE     : "NAMESPACE",
   Token.NEW           : "NEW",
   Token.OPERATOR      : "OPERATOR",
   Token.PRIVATE       : "PRIVATE",
   Token.THROW         : "THROW",
   Token.TRY           : "TRY",
   Token.USING         : "USING",
   Token.SUPER         : "SUPER",
   Token.DELEGATE      : "DELEGATE",
   Token.PAREN_OPEN    : "PAREN_OPEN",
   Token.PAREN_CLOSE   : "PAREN_CLOSE",
   Token.ANGLE_OPEN    : "ANGLE_OPEN",
   Token.ANGLE_CLOSE   : "ANGLE_CLOSE",
   Token.SPAREN_OPEN   : "SPAREN_OPEN",
   Token.SPAREN_CLOSE  : "SPAREN_CLOSE",
   Token.FPAREN_OPEN   : "FPAREN_OPEN",
   Token.FPAREN_CLOSE  : "FPAREN_CLOSE",
   Token.BRACE_OPEN    : "BRACE_OPEN",
   Token.BRACE_CLOSE   : "BRACE_CLOSE",
   Token.VBRACE_OPEN   : "VBRACE_OPEN",
   Token.VBRACE_CLOSE  : "VBRACE_CLOSE",
   Token.SQUARE_OPEN   : "SQUARE_OPEN",
   Token.SQUARE_CLOSE  : "SQUARE_CLOSE",
   Token.TSQUARE       : "TSQUARE",
   Token.LABEL         : "LABEL",
   Token.LABEL_COLON   : "LABEL_COLON",
   Token.FUNCTION      : "FUNCTION",
   Token.FUNC_CALL     : "FUNC_CALL",
   Token.FUNC_DEF      : "FUNC_DEF",
   Token.FUNC_PROTO    : "FUNC_PROTO",
   Token.MACRO_FUNC    : "MACRO_FUNC",
   Token.MACRO         : "MACRO",
   Token.QUALIFIER     : "QUALIFIER",
   Token.ALIGN         : "ALIGN",
   Token.TYPE          : "TYPE",
   Token.PTR_TYPE      : "PTR_TYPE",
   Token.BIT_COLON     : "BIT_COLON",
   Token.CLASS_COLON   : "CLASS_COLON",
   Token.PP_DEFINE     : "PP_DEFINE",
   Token.PP_DEFINED    : "PP_DEFINED",
   Token.PP_INCLUDE    : "PP_INCLUDE",
   Token.PP_IF         : "PP_IF",
   Token.PP_ELSE       : "PP_ELSE",
   Token.PP_ENDIF      : "PP_ENDIF",
   Token.PP_OTHER      : "PP_OTHER",
   Token.PRAGMA        : "PRAGMA",
   Token.LOCK          : "LOCK",
   Token.AS            : "AS",
   Token.IN            : "IN",
   Token.BRACED        : "BRACED",
   Token.PBRACED       : "PBRACED",
   Token.POBRACED      : "POBRACED",
   Token.VBRACED       : "VBRACED",
   Token.VERSION       : "VERSION",
   Token.THIS          : "THIS",
   Token.BASE          : "BASE",
   Token.DEFAULT       : "DEFAULT",
   Token.GETSET        : "GETSET",
   Token.CONCAT        : "CONCAT",
   Token.D_TEMPLATE    : "D_TEMPLATE",
];

char [] Token_ToString(Token e, char [] error_str = "???")
{
   if ((e >= Token.min) && (cast(int)e < Token_names.length) &&
       (Token_names[e] !is null)) {
      return Token_names[e];
   }
   return error_str;
}

Token Token_FromString(char [] name)
{
   for (int idx = cast(int)Token.min; idx < Token_names.length; idx++) {
      if ((Token_names[idx] !is null) && (icmp(Token_names[idx], name) == 0))
         return cast(Token)idx;
   }
   return cast(Token)-1;
}

